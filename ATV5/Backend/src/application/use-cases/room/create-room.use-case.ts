// src/application/use-cases/room/create-room.use-case.ts
import { IRoomRepository } from '../../../core/interfaces/repositories/room.repository.interface';
import { RoomEntity } from '../../../core/entities/room.entity';
import { CreateRoomDto } from '../../../core/dtos/room/create-room.dto';

export class CreateRoomUseCase {
  constructor(private readonly roomRepository: IRoomRepository) {}

  async execute(createRoomDto: CreateRoomDto): Promise<RoomEntity> {
    // Check if room with same designation already exists
    const existingRoom = await this.roomRepository.findByDesignation(createRoomDto.designation);
    if (existingRoom) {
      throw new Error(`Room with designation '${createRoomDto.designation}' already exists`);
    }

    // Validate room has at least one bed
    if (createRoomDto.singleBeds === 0 && createRoomDto.doubleBeds === 0) {
      throw new Error('Room must have at least one bed');
    }

    // Create room entity
    const room = new RoomEntity(
      '', // Will be generated by repository
      createRoomDto.designation,
      createRoomDto.singleBeds,
      createRoomDto.doubleBeds,
      createRoomDto.bathrooms,
      createRoomDto.hasAirControl,
      createRoomDto.parkingSpaces
    );

    // Create room in repository
    return this.roomRepository.create(room);
  }

  async createStandardRooms(): Promise<RoomEntity[]> {
    return this.roomRepository.createStandardRooms();
  }
}