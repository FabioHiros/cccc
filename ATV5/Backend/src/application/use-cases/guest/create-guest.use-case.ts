// src/application/use-cases/guest/create-guest.use-case.ts - BYPASS ALL VALIDATION
import { IGuestRepository } from '../../../core/interfaces/repositories/guest.repository.interface';
import { GuestEntity } from '../../../core/entities/guest.entity';
import { CreateGuestDto } from '../../../core/dtos/guest/create-guest.dto';

export class CreateGuestUseCase {
  constructor(private readonly guestRepository: IGuestRepository) {}

  async execute(createGuestDto: CreateGuestDto): Promise<GuestEntity> {
    console.log('üéØ Creating guest with data:', createGuestDto);

    // Validate primary guest exists if creating companion
    let primaryGuestData = null;
    if (createGuestDto.primaryGuestId) {
      try {
        primaryGuestData = await this.guestRepository.findById(createGuestDto.primaryGuestId);
        if (!primaryGuestData) {
          throw new Error('Primary guest not found');
        }
        if (!primaryGuestData.isPrimaryGuest()) {
          throw new Error('Selected guest is not a primary guest');
        }
        console.log('‚úÖ Primary guest validated:', primaryGuestData.fullName);
      } catch (error) {
        console.error('‚ùå Primary guest validation failed:', error);
        throw error;
      }
    }

    // COMPLETELY SKIP ALL DOCUMENT VALIDATION
    console.log('‚è≠Ô∏è Skipping all document validation checks');

    // Create guest entity
    const guest = new GuestEntity(
      '', // Will be generated by repository
      createGuestDto.fullName,
      createGuestDto.displayName,
      new Date(createGuestDto.birthDate),
      createGuestDto.primaryGuestId
    );

    console.log('‚úÖ Guest entity created:', guest.fullName);

    // Set address - inherit from primary guest if companion, or use provided address
    if (createGuestDto.primaryGuestId && primaryGuestData?.address) {
      // Companion: inherit address from primary guest
      guest.address = {
        id: '', // Will be generated
        street: primaryGuestData.address.street,
        district: primaryGuestData.address.district,
        city: primaryGuestData.address.city,
        region: primaryGuestData.address.region,
        country: primaryGuestData.address.country,
        postalCode: primaryGuestData.address.postalCode,
      };
      console.log('‚úÖ Address inherited from primary guest');
    } else if (createGuestDto.address) {
      // Primary guest: use provided address
      guest.address = {
        id: '', // Will be generated
        ...createGuestDto.address
      };
      console.log('‚úÖ Address set from provided data');
    }

    try {
      console.log('üîÑ Creating guest in database...');
      
      // Create guest in repository
      const createdGuest = await this.guestRepository.create(guest);
      console.log('‚úÖ Guest created in database with ID:', createdGuest.id);

      // Add document if provided - WITH ERROR HANDLING
      if (createGuestDto.document && createGuestDto.document.identifier) {
        try {
          console.log('üîÑ Adding document...');
          await this.guestRepository.addDocumentToGuest(createdGuest.id, {
            category: createGuestDto.document.category,
            identifier: createGuestDto.document.identifier,
            issuedDate: new Date(createGuestDto.document.issuedDate)
          });
          console.log('‚úÖ Document added successfully');
        } catch (docError) {
          console.warn('‚ö†Ô∏è Failed to add document, continuing without it:', docError);
          // Continue without document - DON'T FAIL THE WHOLE OPERATION
        }
      }

      // Add contact - inherit from primary guest if companion, or use provided contact
      let contactToAdd = null;
      if (createGuestDto.primaryGuestId && primaryGuestData?.contacts?.length > 0) {
        // Companion: inherit contact from primary guest
        contactToAdd = {
          areaCode: primaryGuestData.contacts[0].areaCode,
          number: primaryGuestData.contacts[0].number
        };
        console.log('‚úÖ Contact inherited from primary guest');
      } else if (createGuestDto.contact?.areaCode && createGuestDto.contact?.number) {
        // Primary guest: use provided contact
        contactToAdd = createGuestDto.contact;
        console.log('‚úÖ Contact set from provided data');
      }

      if (contactToAdd) {
        try {
          console.log('üîÑ Adding contact...');
          await this.guestRepository.addContactToGuest(createdGuest.id, contactToAdd);
          console.log('‚úÖ Contact added successfully');
        } catch (contactError) {
          console.warn('‚ö†Ô∏è Failed to add contact, continuing without it:', contactError);
          // Continue without contact - DON'T FAIL THE WHOLE OPERATION
        }
      }

      console.log('üéâ Guest creation completed successfully!');
      
      // Return the complete guest with all relations
      return this.guestRepository.findById(createdGuest.id) as Promise<GuestEntity>;
      
    } catch (error: any) {
      // Enhanced error logging
      console.error('‚ùå Guest creation failed:', {
        error: error.message,
        code: error.code,
        meta: error.meta,
        stack: error.stack
      });
      
      // Try to provide more helpful error messages
      if (error.code === 'P2002') {
        const target = error.meta?.target;
        if (target?.includes('designation')) {
          throw new Error('A room with this name already exists.');
        } else if (target?.includes('identifier')) {
          throw new Error('This document number is already in use.');
        } else if (target?.includes('fullName')) {
          throw new Error('A guest with this name already exists.');
        } else {
          // FALLBACK: Try to continue anyway
          console.log('üîÑ Attempting to create guest without optional data...');
          
          // Try creating just the basic guest without documents/contacts
          try {
            const basicGuest = new GuestEntity(
              '',
              createGuestDto.fullName + ' ' + Date.now(), // Add timestamp to make unique
              createGuestDto.displayName,
              new Date(createGuestDto.birthDate),
              createGuestDto.primaryGuestId
            );
            
            const createdBasicGuest = await this.guestRepository.create(basicGuest);
            console.log('‚úÖ Basic guest created successfully');
            return createdBasicGuest;
          } catch (basicError) {
            console.error('‚ùå Even basic guest creation failed:', basicError);
            throw new Error('Unable to create guest. Please try with different information.');
          }
        }
      }
      
      throw new Error(`Guest creation failed: ${error.message}`);
    }
  }
}