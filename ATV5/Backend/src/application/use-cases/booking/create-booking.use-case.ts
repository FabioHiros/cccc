// src/application/use-cases/booking/create-booking.use-case.ts - FINAL FIX
import { IBookingRepository } from '../../../core/interfaces/repositories/booking.repository.interface';
import { IGuestRepository } from '../../../core/interfaces/repositories/guest.repository.interface';
import { IRoomRepository } from '../../../core/interfaces/repositories/room.repository.interface';
import { BookingEntity } from '../../../core/entities/booking.entity';
import { CreateBookingDto } from '../../../core/dtos/booking/create-booking.dto';
import { BookingStatus } from '../../../core/enums/booking-status.enum';

export class CreateBookingUseCase {
  constructor(
    private readonly bookingRepository: IBookingRepository,
    private readonly guestRepository: IGuestRepository,
    private readonly roomRepository: IRoomRepository
  ) {}

  async execute(createBookingDto: CreateBookingDto): Promise<BookingEntity> {
    console.log('üéØ CreateBookingUseCase received:', createBookingDto);

    // Parse dates - handle YYYY-MM-DD format from frontend
    const arrivalDate = new Date(createBookingDto.arrivalDate + 'T00:00:00.000Z');
    const departDate = new Date(createBookingDto.departDate + 'T00:00:00.000Z');

    console.log('üìÖ Parsed dates:', {
      arrivalDateString: createBookingDto.arrivalDate,
      departDateString: createBookingDto.departDate,
      arrivalDateParsed: arrivalDate.toISOString(),
      departDateParsed: departDate.toISOString(),
      arrivalDateLocal: arrivalDate.toLocaleDateString(),
      departDateLocal: departDate.toLocaleDateString()
    });

    // Validate dates
    if (arrivalDate >= departDate) {
      console.log('‚ùå Date order validation failed');
      throw new Error('Arrival date must be before departure date');
    }

    // MUCH MORE LENIENT past date validation
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate()); // Today at 00:00:00 local time
    const arrivalDateLocal = new Date(arrivalDate.getUTCFullYear(), arrivalDate.getUTCMonth(), arrivalDate.getUTCDate());

    console.log('üïê Past date validation:', {
      now: now.toISOString(),
      today: today.toISOString(),
      arrivalDateLocal: arrivalDateLocal.toISOString(),
      todayTime: today.getTime(),
      arrivalTime: arrivalDateLocal.getTime(),
      isPast: arrivalDateLocal < today,
      difference: arrivalDateLocal.getTime() - today.getTime()
    });

    // Only reject if arrival is clearly before today
    if (arrivalDateLocal < today) {
      console.log('‚ùå Past date validation failed - arrival is before today');
      throw new Error('Check-in date cannot be in the past');
    }

    console.log('‚úÖ Date validation passed');

    // Validate primary guest exists and is a primary guest
    console.log('üë§ Validating primary guest...');
    const primaryGuest = await this.guestRepository.findById(createBookingDto.primaryId);
    if (!primaryGuest) {
      console.log('‚ùå Primary guest not found');
      throw new Error('Primary guest not found');
    }

    if (!primaryGuest.isPrimaryGuest()) {
      console.log('‚ùå Guest is not primary');
      throw new Error('Only primary guests can make reservations');
    }

    console.log('‚úÖ Primary guest validated:', primaryGuest.fullName);

    // Validate room exists and is active
    console.log('üè† Validating room...');
    const room = await this.roomRepository.findById(createBookingDto.roomId);
    if (!room) {
      console.log('‚ùå Room not found');
      throw new Error('Room not found');
    }

    if (!room.isActive) {
      console.log('‚ùå Room is inactive');
      throw new Error('Room is not available for booking');
    }

    console.log('‚úÖ Room validated:', room.designation);

    // Check room availability
    console.log('üìã Checking room availability...');
    const isAvailable = await this.bookingRepository.checkRoomAvailability(
      createBookingDto.roomId,
      arrivalDate,
      departDate
    );

    if (!isAvailable) {
      console.log('‚ùå Room not available for selected dates');
      throw new Error('Room is not available for the selected dates');
    }

    console.log('‚úÖ Room is available');

    // Create booking entity
    console.log('üìù Creating booking entity...');
    const booking = new BookingEntity(
      '', // Will be generated by repository
      createBookingDto.primaryId,
      createBookingDto.roomId,
      arrivalDate,
      departDate,
      createBookingDto.status || BookingStatus.CONFIRMED,
      createBookingDto.totalAmount,
      createBookingDto.notes
    );

    console.log('üíæ Saving booking to repository...');
    const createdBooking = await this.bookingRepository.create(booking);
    
    console.log('üéâ Booking created successfully:', createdBooking.id);
    return createdBooking;
  }
}